{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[CN: F1G06] - Artificial Neural Networks in Clinical Examinations\n",
    "\n",
    "### Grupo 06\n",
    "\n",
    "    > pg41073 - Hugo Afonso Da Gião\n",
    "\n",
    "    > a73855  - José Lopes Ramos\n",
    "\n",
    "    > a77310  - Nuno Filipe Maranhão dos Reis\n",
    "\n",
    "\n",
    "\n",
    "## Objetives\n",
    "\n",
    "## Predict whether a mammogram mass is benign or malignant\n",
    "\n",
    "We'll be using the \"mammographic masses\" public dataset.\n",
    "\n",
    "This data contains 961 instances of masses detected in mammograms, and contains the following attributes:\n",
    "\n",
    "\n",
    "   1. BI-RADS assessment: 1 to 5 (ordinal)  \n",
    "   2. Age: patient's age in years (integer)\n",
    "   3. Shape: mass shape: round=1 oval=2 lobular=3 irregular=4 (nominal)\n",
    "   4. Margin: mass margin: circumscribed=1 microlobulated=2 obscured=3 ill-defined=4 spiculated=5 (nominal)\n",
    "   5. Density: mass density high=1 iso=2 low=3 fat-containing=4 (ordinal)\n",
    "   6. Severity: benign=0 or malignant=1 (binominal)\n",
    "   \n",
    "BI-RADS is an assesment of how confident the severity classification is; it is not a \"predictive\" attribute and so we will discard it. The age, shape, margin, and density attributes are the features that we will build our model with, and \"severity\" is the classification we will attempt to predict based on those attributes.\n",
    "\n",
    "Although \"shape\" and \"margin\" are nominal data types, which sklearn typically doesn't deal with well, they are close enough to ordinal that we shouldn't just discard them. The \"shape\" for example is ordered increasingly from round to irregular.\n",
    "\n",
    "A lot of unnecessary anguish and surgery arises from false positives arising from mammogram results. \n",
    "\n",
    "Build a better way to interpret them through supervised machine learning.\n",
    "\n",
    "## Your assignment\n",
    "\n",
    "Apply Artificial Neural Network supervised machine learning techniques to this data set and validate it by applying K-Fold cross validation (K=10).\n",
    "\n",
    "The data needs to be cleaned; many rows contain missing data, and there may be erroneous data identifiable as outliers as well.\n",
    "\n",
    "Many optimization techniques provide the means of \"hyperparameters\" to be tuned (e.g. Genetic Algorithms). Once you identify a promising approach, see if you can make it even better by tuning its hyperparameters.\n",
    "\n",
    "Below it's described the set of steps that outline the development of this project, with some guidance and hints. If you're up for a real challenge, try doing this project from scratch in a new, clean notebook!\n",
    "\n",
    "\n",
    "\n",
    "Distribution per class: benign: 516; malignant: 445;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's begin: prepare your data\n",
    "\n",
    "Start by importing the mammographic_masses.data.txt file into a Pandas dataframe (hint: use read_csv) and take a look at it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from statistics import *\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"mammographic_masses.data.txt\", sep=\",\", header=None, na_values = '?').astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0     1    2    3    4    5\n",
       "0  5.0  67.0  3.0  5.0  3.0  1.0\n",
       "1  4.0  43.0  1.0  1.0  NaN  1.0\n",
       "2  5.0  58.0  4.0  5.0  3.0  1.0\n",
       "3  4.0  28.0  1.0  1.0  3.0  0.0\n",
       "4  5.0  74.0  1.0  5.0  NaN  1.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make sure you use the optional parmaters in read_csv to convert missing data (indicated by a ?) into NaN, and to add the appropriate column names (BI_RADS, age, shape, margin, density, and severity):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns = [\"BI-RADS\", \"Age\", \"Shape\", \"Margin\", \"Density\", \"Severity\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BI-RADS</th>\n",
       "      <th>Age</th>\n",
       "      <th>Shape</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Density</th>\n",
       "      <th>Severity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   BI-RADS   Age  Shape  Margin  Density  Severity\n",
       "0      5.0  67.0    3.0     5.0      3.0       1.0\n",
       "1      4.0  43.0    1.0     1.0      NaN       1.0\n",
       "2      5.0  58.0    4.0     5.0      3.0       1.0\n",
       "3      4.0  28.0    1.0     1.0      3.0       0.0\n",
       "4      5.0  74.0    1.0     5.0      NaN       1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Understading\n",
    "\n",
    "### Feature Understanding\n",
    "\n",
    "#### Bi-Rads\n",
    "\n",
    "BI-RADS Assessment: 1-5 (ordinal);\n",
    "\n",
    "Stands for Breast Imaging Reporting and Data System. \n",
    "\n",
    "https://www.cancer.org/cancer/breast-cancer/screening-tests-and-early-detection/mammograms/understanding-your-mammogram-report.html\n",
    "\n",
    "Doctors use a standard system to describe mammogram findings and results. This system (called the Breast Imaging Reporting and Data System or BI-RADS) sorts the results into categories numbered 0 through 6.\n",
    "\n",
    "By sorting the results into these categories, doctors can describe what they find on a mammogram using the same words and terms. This makes communicating about these test results and following up after the tests much easier.\n",
    "\n",
    "Podemos entao ver que e um valor dado pelos medicos em função dos resultados dos exames.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x13751b8d9c8>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAATYklEQVR4nO3df7BkZX3n8fcHBsRVEZALgRnYwThltDaKZJZlw67ZQDZBkghJQYIVZYqQGlOLWS2NWUyqdk2im6SyxsSYxSKiDv5YpVBkQmk2FKBZswIOioBglgkhcncIMwqixs0P5Lt/9HMf2js9Q8/Aud3DvF9VXX3Oc57T99tN0595zunzdKoKSZIADph1AZKk+WEoSJI6Q0GS1BkKkqTOUJAkdatmXcATceSRR9batWtnXYYk7VNuueWWr1bVwqRt+3QorF27li1btsy6DEnapyT5m11t8/CRJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqdunr2iWnkyffukPzbqEXfqhP//0rEvQfsKRgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkrpBQyHJvUluT3Jrki2t7Ygk1ya5u90f3tqT5B1Jtia5LclJQ9YmSdrZSowUfriqTqyq9W39YuC6qloHXNfWAV4GrGu3jcAlK1CbJGnMLA4fnQVsasubgLPH2i+vkRuBw5IcM4P6JGm/NXQoFPBnSW5JsrG1HV1V9wO0+6Na+2rgvrF9F1ubJGmFDP3La6dW1bYkRwHXJvnybvpmQlvt1GkULhsBjj/++CenSkkSMPBIoaq2tfvtwFXAycADS4eF2v321n0ROG5s9zXAtgmPeWlVra+q9QsLC0OWL0n7ncFCIckzkjxraRn4UeAOYDOwoXXbAFzdljcD57dvIZ0CPLx0mEmStDKGPHx0NHBVkqW/86Gq+tMknwOuSHIh8BXg3Nb/E8CZwFbg28AFA9YmSZpgsFCoqnuAF09o/xpw+oT2Ai4aqh5J0uPzimZJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYOHQpIDk3whyTVt/YQkNyW5O8lHkhzc2p/W1re27WuHrk2S9N1WYqTwWuCusfXfAd5eVeuAh4ALW/uFwENV9Tzg7a2fJGkFDRoKSdYAPw68u60HOA24snXZBJzdls9q67Ttp7f+kqQVMvRI4feBXwEebevPAb5eVY+09UVgdVteDdwH0LY/3Pp/lyQbk2xJsmXHjh1D1i5J+53BQiHJTwDbq+qW8eYJXWuKbY81VF1aVeurav3CwsKTUKkkacmqAR/7VODlSc4EDgEOZTRyOCzJqjYaWANsa/0XgeOAxSSrgGcDDw5YnyRpmcFGClX1pqpaU1VrgfOA66vq54AbgHNatw3A1W15c1unbb++qnYaKUiShjOL6xT+E/D6JFsZnTO4rLVfBjyntb8euHgGtUnSfm3Iw0ddVX0K+FRbvgc4eUKfvwfOXYl6JEmTeUWzJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkbkV+T0HS8N75hj+ZdQkTveZtPznrErQHHClIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktRNFQpJrpumTZK0b9vt3EdJDgH+GXBkksOBtE2HAscOXJskaYU93oR4rwZexygAbuGxUPgG8EcD1iVJmoHdHj6qqj+oqhOAX66q51bVCe324qp65+72TXJIkpuTfDHJl5L8ems/IclNSe5O8pEkB7f2p7X1rW372ifpOUqSpjTV1NlV9YdJfhBYO75PVV2+m93+ATitqr6V5CDgM0k+CbweeHtVfTjJu4ALgUva/UNV9bwk5wG/A/zs3jwpSdLemfZE8/uB/wb8G+Bfttv63e1TI99qqwe1WwGnAVe29k3A2W35rLZO2356kqXDVZKkFTDtj+ysB15YVbUnD57kQEbnIp7H6BzEXwFfr6pHWpdFYHVbXg3cB1BVjyR5GHgO8NVlj7kR2Ahw/PHH70k5kqTHMe11CncA37OnD15V36mqE4E1wMnACyZ1a/eTRgU7hVBVXVpV66tq/cLCwp6WJEnajWlHCkcCdya5mdG5AgCq6uXT7FxVX0/yKeAU4LAkq9poYQ2wrXVbBI4DFpOsAp4NPDhlfZKkJ8G0ofDmPX3gJAvAP7VAeDrwI4xOHt8AnAN8GNgAXN122dzWP9u2X7+nh6skSU/MtN8++vRePPYxwKZ2XuEA4IqquibJncCHk7wF+AJwWet/GfD+JFsZjRDO24u/KUl6AqYKhSTf5LHj+wcz+ibR31XVobvap6puA14yof0eRucXlrf/PXDuNPVIkoYx7UjhWePrSc5mwge7JGnftlezpFbVxxldbyBJegqZ9vDRT4+tHsDougVPAkvSU8y03z76ybHlR4B7GV2BLEl6Cpn2nMIFQxciSZq9aec+WpPkqiTbkzyQ5KNJ1gxdnCRpZU17ovm9jC4uO5bRHEV/0tokSU8h04bCQlW9t6oeabf3AU48JElPMdOGwleTvDLJge32SuBrQxYmSVp504bCzwM/A/wtcD+juYk8+SxJTzHTfiX1N4ENVfUQQJIjGP3ozs8PVZgkaeVNO1J40VIgAFTVg0yY10iStG+bNhQOSHL40kobKUw7ypAk7SOm/WB/G/C/k1zJaHqLnwHeOlhVkqSZmPaK5suTbGE0CV6An66qOwetTJK04qY+BNRCwCCQpKewvZo6W5L01GQoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1g4VCkuOS3JDkriRfSvLa1n5EkmuT3N3uD2/tSfKOJFuT3JbkpKFqkyRNNuRI4RHgDVX1AuAU4KIkLwQuBq6rqnXAdW0d4GXAunbbCFwyYG2SpAkGC4Wqur+qPt+WvwncBawGzgI2tW6bgLPb8lnA5TVyI3BYkmOGqk+StLMVOaeQZC3wEuAm4Oiquh9GwQEc1bqtBu4b222xtS1/rI1JtiTZsmPHjiHLlqT9zuChkOSZwEeB11XVN3bXdUJb7dRQdWlVra+q9QsLC09WmZIkBg6FJAcxCoQPVtXHWvMDS4eF2v321r4IHDe2+xpg25D1SZK+25DfPgpwGXBXVf3e2KbNwIa2vAG4eqz9/PYtpFOAh5cOM0mSVsaqAR/7VOBVwO1Jbm1tvwr8NnBFkguBrwDntm2fAM4EtgLfBi4YsDZJ0gSDhUJVfYbJ5wkATp/Qv4CLhqpHkvT4vKJZktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoMBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmdoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSd1goZDkPUm2J7ljrO2IJNcmubvdH97ak+QdSbYmuS3JSUPVJUnatSFHCu8DzljWdjFwXVWtA65r6wAvA9a120bgkgHrkiTtwmChUFV/Djy4rPksYFNb3gScPdZ+eY3cCByW5JihapMkTbbS5xSOrqr7Adr9Ua19NXDfWL/F1raTJBuTbEmyZceOHYMWK0n7m3k50ZwJbTWpY1VdWlXrq2r9wsLCwGVJ0v5lpUPhgaXDQu1+e2tfBI4b67cG2LbCtUnSfm+lQ2EzsKEtbwCuHms/v30L6RTg4aXDTJKklbNqqAdO8j+AfwccmWQR+C/AbwNXJLkQ+Apwbuv+CeBMYCvwbeCCoeqSJO3aYKFQVa/YxabTJ/Qt4KKhapEkTWdeTjRLkuaAoSBJ6gwFSVJnKEiSOkNBktQZCpKkzlCQJHWGgiSpMxQkSZ2hIEnqDAVJUmcoSJI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSeoG+zlO7Z9O/cNTZ13CRH/xS38x6xKkfYIjBUlSZyhIkjpDQZLUGQqSpM5QkCR1hoIkqTMUJEmd1ynMma/8xvfPuoSJjv/Pt8+6BEkrwJGCJKlzpCBpLrz1lefMuoSJfu0DV866hBU1VyOFJGck+cskW5NcPOt6JGl/MzcjhSQHAn8E/HtgEfhcks1VdeeePM4PvPHyIcp7wm753fNnXYIkPa65CQXgZGBrVd0DkOTDwFnAHoWCJM3CXW+9ftYlTPSCXzttj/qnqgYqZc8kOQc4o6p+oa2/CvhXVfWaZf02Ahvb6vOBvxywrCOBrw74+EOz/tnZl2sH65+1oev/51W1MGnDPI0UMqFtp8SqqkuBS4cvB5Jsqar1K/G3hmD9s7Mv1w7WP2uzrH+eTjQvAseNra8Bts2oFknaL81TKHwOWJfkhCQHA+cBm2dckyTtV+bm8FFVPZLkNcD/BA4E3lNVX5pxWStymGpA1j87+3LtYP2zNrP65+ZEsyRp9ubp8JEkacYMBUlSZyjw+NNrJHlako+07TclWbvyVU6W5LgkNyS5K8mXkrx2Qp8keUer/7YkJ82i1kmSHJLk5iRfbPX/+oQ+c/v6w+hq/CRfSHLNhG3zXvu9SW5PcmuSLRO2z+17ByDJYUmuTPLl9v/Av162fe7qn/SaJ3lzkv/b2m5NcuYu9h1+KqCq2q9vjE5q/xXwXOBg4IvAC5f1+Q/Au9ryecBHZl33WG3HACe15WcB/2dC/WcCn2R0LcgpwE2zrnustgDPbMsHATcBp+wrr3+r6fXAh4BrJmyb99rvBY7czfa5fe+0+jYBv9CWDwYOm/f6J73mwJuBX36c/R73s+rJuDlSGJteo6r+EViaXmPcWYzefABXAqcnmXSx3Yqrqvur6vNt+ZvAXcDqZd3OAi6vkRuBw5Ics8KlTtRq+lZbPajdln/7YW5f/yRrgB8H3r2LLnNb+5Tm9r2T5FDgpcBlAFX1j1X19WXd5rb+vTDNZ9UTZiiMPkDvG1tfZOcP1d6nqh4BHgaesyLV7YF2aOIljP61PW6a5zgz7fDLrcB24Nqq2mX9c/j6/z7wK8Cju9g+z7XDKID/LMktbQqZ5eb5vfNcYAfw3nb47t1JnrGszzzWv6vX/DXtENd7khw+Yb8VeS6GwnTTa0w1BccsJXkm8FHgdVX1jeWbJ+wyN/VX1Xeq6kRGV7GfnORfLOsyl/Un+Qlge1XdsrtuE9pmXvuYU6vqJOBlwEVJXrps+zzXvwo4Cbikql4C/B2w/Dj7PNY/6TW/BPhe4ETgfuBtE/ZbkediKEw3vUbvk2QV8GzgwRWpbgpJDmIUCB+sqo9N6LJPTCHShv6fAs5YtmleX/9TgZcnuZfRUP60JB9Y1mdeawegqra1++3AVYwOUYyb5/fOIrA4NrK8klFILO8zV/VPes2r6oH2j6NHgT9m5/8OsELPxVCYbnqNzcCGtnwOcH21Mz+z1o5PXwbcVVW/t4tum4Hz2zcxTgEerqr7V6zI3UiykOSwtvx04EeALy/rNpevf1W9qarWVNVaRu+b66vqlcu6zWXtAEmekeRZS8vAjwJ3LOs2t++dqvpb4L4kz29Np7PzVPtzVf+uXvNl5zl+ip3/O8AKTQU0N9NczErtYnqNJL8BbKmqzYw+dN+fZCujf+WdN7uKd3Iq8Crg9nZcHuBXgeMBqupdwCcYfQtjK/Bt4IIZ1LkrxwCbMvqRpQOAK6rqmn3o9d/JPlT70cBV7bz3KuBDVfWnSX4R9on3DsAvAR9sH5L3ABfMef27es3fn+RERoeD7gVeDZDkWODdVXXmrj6rnuwCneZCktR5+EiS1BkKkqTOUJAkdYaCJKkzFCRJnaEgNUm+02ao/GKSzyf5wda+Nsmk742T5H1J/npsv9OXbV9I8k9JXr2sfWmmzNuT3JnkLUme1rYd0Gb2vKNt/1ySE4Z63tI4Q0F6zP+rqhOr6sXAm4DfmnK/N7ZpOl4HvGvZtnOBG4FXTNjvh6vq+xldvfpcHvsJxp8FjgVe1Lb/FLB8ojdpEIaCNNmhwEN7uM9n2XmCslcAbwDWJJk4eVmbJfYXgbOTHMHogr7725QHVNViVe1pLdJe2e+vaJbGPL1dFX4Iow/m0/Zw/zOAjy+tJDkO+J6qujnJFYxGABOnIqmqbyT5a2AdcAXwmST/FrgO+EBVfWGPn420FxwpSI9ZOnz0fYw+4C+f8rcPfjfJPcAHgP861n4eow94GE2YN+kQ0rjAaGQAPJ/RIaxHgeuWn6uQhuJIQZqgqj6b5EhgYbw9yXsZ/WbFtqpa+snENwIfA/4jox/U+YHW/grg6CQ/19aPTbKuqu5e/vfaJGlrGf1yHlX1D4x+MeyTSR4AzmY0apAG5UhBmiDJ9zGadOxr4+1VdUEbTZy5rP1R4A+AA5L8WJu58xlVtbqq1raZVH+LCRPitd/C+O/Ax6vqoSQntYnQSHIA8CLgb578ZyntzJGC9JilcwowOpSzoaq+M90RpNFPiyZ5C6NfYvtfjObKH/dRRoeRfrOt39AOTx3Q+i61HwX88dJXVIGbgXfuxfOR9pizpEqSOg8fSZI6Q0GS1BkKkqTOUJAkdYaCJKkzFCRJnaEgSer+P6fWiXK0NOILAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='BI-RADS',data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Age\n",
    "\n",
    "Age: Patient’s age accounted in years (integer);\n",
    "\n",
    "A possibilidade de ter cancro da mama aumenta com o aumento da idade; uma mulher com mais de 60 anos apresenta maior risco. O cancro da mama é menos comum antes da menopausa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x13753441a48>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Age',hue='Severity',data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"Severity\", y=\"Age\", kind=\"box\", data=data);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Shape\n",
    "Mass shape: round=1, oval=2, lobular=3, irregular=4 (nominal);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x13753740648>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Shape',data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Margin\n",
    "Mass margin: circumscribed=1, micro-lobed=2, obscured=3, ill-defined=4, spiked=5\n",
    "(nominal);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1375374cc88>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Margin',data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Density\n",
    "https://www.breastcancer.org/symptoms/testing/types/mammograms/results\n",
    "\n",
    "Density é :\n",
    "Mammogram reports also include an assessment of  breasts’ density. Dense breasts have less fatty tissue and more non-fatty tissue compared to breasts that aren’t dense. Dense breasts:\n",
    "\n",
    "Breast density is categorized into four groups:\n",
    "Density: mass density high=1 iso=2 low=3 fat-containing=4 (ordinal)\n",
    "\n",
    "   1. Extremely dense: The breasts have a lot of fibrous and glandular tissue. This may make it hard to see a cancer on a mammogram because the cancer can blend in with the normal tissue.\n",
    "   2. Consistent density: The breasts have many areas of fibrous and glandular tissue that are evenly distributed through the breasts. This can make it hard to see small masses in the breast.\n",
    "   3. Scattered density: The breasts have quite a bit of fat, but there are a few areas of fibrous and glandular tissue.\n",
    "   4. Mostly fatty: The breasts are made up of mostly fat and contain little fibrous and glandular tissue. This means the mammogram would likely show anything that was abnormal.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1375384b808>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Density',data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Severity\n",
    "\n",
    "Severity: benign=0, malignant =1 (binominal);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x13753911c88>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Severity',data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate whether the data needs cleaning; your model is only as good as the data it's given. Hint: use describe() on the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BI-RADS</th>\n",
       "      <th>Age</th>\n",
       "      <th>Shape</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Density</th>\n",
       "      <th>Severity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>959.000000</td>\n",
       "      <td>956.000000</td>\n",
       "      <td>930.000000</td>\n",
       "      <td>913.000000</td>\n",
       "      <td>885.000000</td>\n",
       "      <td>961.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.348279</td>\n",
       "      <td>55.487448</td>\n",
       "      <td>2.721505</td>\n",
       "      <td>2.796276</td>\n",
       "      <td>2.910734</td>\n",
       "      <td>0.463059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.783031</td>\n",
       "      <td>14.480131</td>\n",
       "      <td>1.242792</td>\n",
       "      <td>1.566546</td>\n",
       "      <td>0.380444</td>\n",
       "      <td>0.498893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          BI-RADS         Age       Shape      Margin     Density    Severity\n",
       "count  959.000000  956.000000  930.000000  913.000000  885.000000  961.000000\n",
       "mean     4.348279   55.487448    2.721505    2.796276    2.910734    0.463059\n",
       "std      1.783031   14.480131    1.242792    1.566546    0.380444    0.498893\n",
       "min      0.000000   18.000000    1.000000    1.000000    1.000000    0.000000\n",
       "25%      4.000000   45.000000    2.000000    1.000000    3.000000    0.000000\n",
       "50%      4.000000   57.000000    3.000000    3.000000    3.000000    0.000000\n",
       "75%      5.000000   66.000000    4.000000    4.000000    3.000000    1.000000\n",
       "max     55.000000   96.000000    4.000000    5.000000    4.000000    1.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x137537ab548>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 951.875x900 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(data,hue='Severity')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are quite a few missing values in the data set. Before we just drop every row that's missing data, let's make sure we don't bias our data in doing so. Does there appear to be any sort of correlation to what sort of data has missing fields? If there were, we'd have to try and go back and fill that data in."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are quite a few missing values in the data set. Before we just drop every row that's missing data, let's make sure we don't bias our data in doing so. Does there appear to be any sort of correlation to what sort of data has missing fields? If there were, we'd have to try and go back and fill that data in."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make sure you use the optional parmaters in read_csv to convert missing data (indicated by a ?) into NaN, and to add the appropriate column names (BI_RADS, age, shape, margin, density, and severity):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing Data (NaN)\n",
    "\n",
    "Podemos ver aqui que ha problemas por causa dos missing values. Antes de os retirarmos temos de ver se ao fazelo não vamos criar problemas de bias.\n",
    "\n",
    "https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4\n",
    "\n",
    "We have to understand the reason why data goes missing.\n",
    "\n",
    "   1. Missing at Random (MAR): Missing at random means that the propensity for a data point to be missing is not related to the missing data, but it is related to some of the observed data.\n",
    "   2. Missing Completely at Random (MCAR): The fact that a certain value is missing has nothing to do with its hypothetical value and with the values of other variables.\n",
    "   3. Missing not at Random (MNAR): Two possible reasons are that the missing value depends on the hypothetical value (e.g. People with high salaries generally do not want to reveal their incomes in surveys) or missing value is dependent on some other variable’s value (e.g. Let’s assume that females generally don’t want to reveal their ages! Here the missing value in age variable is impacted by gender variable)\n",
    "\n",
    "\n",
    "In the first two cases, it is safe to remove the data with missing values depending upon their occurrences, while in the third case removing observations with missing values can produce a bias in the model. So we have to be really careful before removing observations. Note that imputation does not necessarily give better results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BI-RADS      2\n",
      "Age          5\n",
      "Shape       31\n",
      "Margin      48\n",
      "Density     76\n",
      "Severity     0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 961 entries, 0 to 960\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   BI-RADS   959 non-null    float64\n",
      " 1   Age       956 non-null    float64\n",
      " 2   Shape     930 non-null    float64\n",
      " 3   Margin    913 non-null    float64\n",
      " 4   Density   885 non-null    float64\n",
      " 5   Severity  961 non-null    float64\n",
      "dtypes: float64(6)\n",
      "memory usage: 45.2 KB\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(data.isna().sum(axis=0))\n",
    "sns.heatmap(data.isnull(), cbar=False)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the missing data seems randomly distributed, go ahead and drop rows with missing data. Hint: use dropna()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BI-RADS     0\n",
      "Age         0\n",
      "Shape       0\n",
      "Margin      0\n",
      "Density     0\n",
      "Severity    0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 830 entries, 0 to 960\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   BI-RADS   830 non-null    float64\n",
      " 1   Age       830 non-null    float64\n",
      " 2   Shape     830 non-null    float64\n",
      " 3   Margin    830 non-null    float64\n",
      " 4   Density   830 non-null    float64\n",
      " 5   Severity  830 non-null    float64\n",
      "dtypes: float64(6)\n",
      "memory usage: 45.4 KB\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(data.isna().sum(axis=0))\n",
    "sns.heatmap(data.isnull(), cbar=False)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x137547538c8>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 951.875x900 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(data,hue='Severity')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Next you'll need to convert the Pandas dataframes into numpy arrays that can be used by scikit_learn. Create an array that extracts only the feature data we want to work with (age, shape, margin, and density) and another array that contains the classes (severity). You'll also need an array of the feature name labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.drop(['BI-RADS','Severity'], axis=1)\n",
    "Y = data['Severity']\n",
    "X=X.reset_index(drop=True)\n",
    "Y=Y.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Shape</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>57.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age  Shape  Margin  Density\n",
       "0  67.0    3.0     5.0      3.0\n",
       "1  58.0    4.0     5.0      3.0\n",
       "2  28.0    1.0     1.0      3.0\n",
       "3  57.0    1.0     5.0      3.0\n",
       "4  76.0    1.0     4.0      3.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "1    1.0\n",
       "2    0.0\n",
       "3    1.0\n",
       "4    1.0\n",
       "Name: Severity, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = data.columns.drop(['BI-RADS','Severity'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some of our models require the input data to be normalized, so go ahead and normalize the attribute data. Hint: use preprocessing.StandardScaler()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standard Scaling\n",
    "\n",
    "When using Neural Network and Deep Learning based systems, it is usually a good idea to Standardize your data.\n",
    "\n",
    "\n",
    "VER MELHOR\n",
    "\n",
    "*aqui pensar em se calhar estratificar as idades, por grupos de risco para facilitar o treino na rede neuronal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X)\n",
    "scaled_features = scaler.fit_transform(X)\n",
    "df_feat = pd.DataFrame(scaled_features,columns=names)\n",
    "X=df_feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Shape</th>\n",
       "      <th>Margin</th>\n",
       "      <th>Density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.765063</td>\n",
       "      <td>0.175636</td>\n",
       "      <td>1.396185</td>\n",
       "      <td>0.240466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.151271</td>\n",
       "      <td>0.981041</td>\n",
       "      <td>1.396185</td>\n",
       "      <td>0.240466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.894704</td>\n",
       "      <td>-1.435172</td>\n",
       "      <td>-1.157718</td>\n",
       "      <td>0.240466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.083071</td>\n",
       "      <td>-1.435172</td>\n",
       "      <td>1.396185</td>\n",
       "      <td>0.240466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.378855</td>\n",
       "      <td>-1.435172</td>\n",
       "      <td>0.757709</td>\n",
       "      <td>0.240466</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age     Shape    Margin   Density\n",
       "0  0.765063  0.175636  1.396185  0.240466\n",
       "1  0.151271  0.981041  1.396185  0.240466\n",
       "2 -1.894704 -1.435172 -1.157718  0.240466\n",
       "3  0.083071 -1.435172  1.396185  0.240466\n",
       "4  1.378855 -1.435172  0.757709  0.240466"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Networks\n",
    "\n",
    "You can use Tensorflow to set up a neural network with 1 binary output neuron and see how it performs. Don't be afraid to run a large number of epochs to train the model if necessary. As a bonus, try to optimize this model's hyperparameters using GA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import accuracy_score,fbeta_score,precision_recall_fscore_support\n",
    "from sklearn.metrics import classification_report,confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['BI-RADS', 'Age', 'Shape', 'Margin', 'Density', 'Severity'], dtype='object')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "age = tf.feature_column.numeric_column(\"Age\")\n",
    "shape = tf.feature_column.numeric_column(\"Shape\")\n",
    "margin = tf.feature_column.numeric_column(\"Margin\")\n",
    "density = tf.feature_column.numeric_column(\"Density\")\n",
    "\n",
    "feat_cols = [age,shape,margin,density]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Genetic Breeding :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "from operator import add\n",
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Optimizer():\n",
    "    \"\"\"Class that implements genetic algorithm.\"\"\"\n",
    "\n",
    "    def __init__(self, nn_param_choices, retain=0.4,\n",
    "                 random_select=0.1, mutate_chance=0.2):\n",
    "        \n",
    "        self.mutate_chance = mutate_chance\n",
    "        self.random_select = random_select\n",
    "        self.retain = retain\n",
    "        self.nn_param_choices = nn_param_choices\n",
    "\n",
    "        \n",
    "        \n",
    "    def create_population(self, count):\n",
    "        \n",
    "        print(\"Start Create Pop.\")\n",
    "        pop = []\n",
    "        for i in range( count):\n",
    "            # Create a random network.\n",
    "            #print(\"Start Create Pop.\")\n",
    "            network = Network(self.nn_param_choices[i])\n",
    "            #network.create_random() Duvida aqui\n",
    "\n",
    "            # Add the network to our population.\n",
    "            pop.append(network)\n",
    "        \n",
    "        return pop\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "    @staticmethod\n",
    "    def fitness(network):\n",
    "        \n",
    "        return network.fbeta\n",
    "\n",
    "    def grade(self, pop):\n",
    "       \n",
    "        summed = reduce(add, (self.fitness(network) for network in pop))\n",
    "        return summed / float((len(pop)))\n",
    "\n",
    "    def breed(self, mother, father): #Birthing Pod#\n",
    "        children = []\n",
    "        for _ in range(2):\n",
    "\n",
    "            child = {}\n",
    "\n",
    "            # Loop through the parameters and pick params for the kid.\n",
    "            for i in range(4):\n",
    "                child[i] = random.choice(\n",
    "                    [mother.pool[i], father.pool[i]]\n",
    "                )\n",
    "\n",
    "            # Now create a network object.\n",
    "            network = Network(self.nn_param_choices)\n",
    "            network.create_set(child)\n",
    "\n",
    "            # Randomly mutate some of the children.\n",
    "            if self.mutate_chance > random.random():\n",
    "                network = self.mutate(network)\n",
    "\n",
    "            children.append(network)\n",
    "\n",
    "        return children\n",
    "\n",
    "    def mutate(self, network):\n",
    "        numberList = [0,1,2,3]\n",
    "        # Choose a random key.\n",
    "        mutation = random.choice(numberList)\n",
    "\n",
    "        # Mutate one of the params.\n",
    "        if mutation==0:\n",
    "            network.pool[mutation] = np.random.uniform(low=10**-2, high=10**-1)\n",
    "        elif  mutation==1:\n",
    "            network.pool[mutation] = np.random.choice([8, 16, 32, 64])\n",
    "        elif  mutation==2:\n",
    "            network.pool[mutation] = np.random.randint(low=1, high=3)\n",
    "        elif  mutation==3:\n",
    "            network.pool[mutation] = np.random.randint(low=0, high=2)\n",
    "        \n",
    "        ## por a gerar a mUTATION ALEATOPRIAMENRE   MMMUUUIITTOO IMPORTANT USAR ORIGINAL PARA ISTO\n",
    "        ## IF E ELIF\n",
    "\n",
    "        return network\n",
    "\n",
    "    def evolve(self, pop):\n",
    "       \n",
    "        # Get scores for each network.\n",
    "        graded = [(self.fitness(network), network) for network in pop]\n",
    "\n",
    "        # Sort on the scores.\n",
    "        graded = [x[1] for x in sorted(graded, key=lambda x: x[0], reverse=True)]\n",
    "\n",
    "        # Get the number we want to keep for the next gen.\n",
    "        retain_length = int(len(graded)*self.retain)\n",
    "\n",
    "        # The parents are every network we want to keep.\n",
    "        parents = graded[:retain_length]\n",
    "\n",
    "        # For those we aren't keeping, randomly keep some anyway.\n",
    "        for individual in graded[retain_length:]:\n",
    "            if self.random_select > random.random():\n",
    "                parents.append(individual)\n",
    "\n",
    "        # Now find out how many spots we have left to fill.\n",
    "        parents_length = len(parents)\n",
    "        desired_length = len(pop) - parents_length\n",
    "        children = []\n",
    "\n",
    "        # Add children, which are bred from two remaining networks.\n",
    "        while len(children) < desired_length:\n",
    "\n",
    "            # Get a random mom and dad.\n",
    "            male = random.randint(0, parents_length-1)\n",
    "            female = random.randint(0, parents_length-1)\n",
    "\n",
    "            # Assuming they aren't the same network...\n",
    "            if male != female:\n",
    "                male = parents[male] # male is a network\n",
    "                female = parents[female]\n",
    "\n",
    "                # Breed them.\n",
    "                babies = self.breed(male, female) ##Birthing Pod\n",
    "\n",
    "                # Add the children one at a time.\n",
    "                for baby in babies:\n",
    "                    # Don't grow larger than desired length.\n",
    "                    if len(children) < desired_length:\n",
    "                        children.append(baby)\n",
    "\n",
    "        parents.extend(children)\n",
    "\n",
    "        return parents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network and Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_classifier_parameters (network):\n",
    "    \n",
    "    h_u=[]\n",
    "    a_f=[]\n",
    "    for i in range(int(network.pool[2])):\n",
    "        #print(\"TESTE,B.\")\n",
    "        h_u.append(network.pool[1])\n",
    "        \n",
    "        \n",
    "    #print(\"TESTE.c\")    \n",
    "    \n",
    " \n",
    "    if((network.pool[3]) == 0): a_f = tf.nn.softmax\n",
    "    #print(\"TESTE.D\")\n",
    "    if((network.pool[3]) == 1): a_f = tf.nn.relu\n",
    "    #print(\"TESTE.E\")\n",
    "    if((network.pool[3]) == 2): a_f = tf.nn.leaky_relu\n",
    "        \n",
    "    classifier = tf.estimator.DNNClassifier(hidden_units=h_u,\n",
    "                                           n_classes=2,\n",
    "                                           feature_columns=feat_cols,\n",
    "                                           #model_dir='C:\\\\Users\\\\jose\\\\Desktop\\\\RNAmodel',\n",
    "                                           activation_fn=a_f,\n",
    "                                           dropout=0.5,\n",
    "                                           optimizer=tf.train.AdamOptimizer(\n",
    "                                              learning_rate=network.pool[0])\n",
    "                                           )\n",
    "                                            \n",
    "   \n",
    "    \n",
    "        \n",
    "        \n",
    "    \n",
    "   \n",
    "    #\n",
    "    #print(\"___________________________________CLASSIFIER\")\n",
    "    #print(\"hidden_units\")\n",
    "    #print(h_u)\n",
    "    #print(\"n_classes\")\n",
    "    #print(2)\n",
    "    ##print(\"feature_columns\")\n",
    "    #print(feat_cols)\n",
    "    #print(\"activation_fn\")\n",
    "    #print(a_f)\n",
    "    #print(\"dropout\")\n",
    "    #print(0.5)\n",
    "    #print(\"optimizer\")\n",
    "    #print(tf.train.AdamOptimizer(\n",
    "    #                                          learning_rate=network.pool[0]\n",
    "    #                                       ))\n",
    "    \n",
    "    \n",
    "    return classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Class that represents the network to be evolved.\"\"\"\n",
    "import random\n",
    "import logging\n",
    "\n",
    "\n",
    "class Network():\n",
    "\n",
    "    def __init__(self, nn_param_choices):\n",
    "        \n",
    "        self.fbeta = 0\n",
    "        self.nn_param_choices = nn_param_choices\n",
    "        self.pool = nn_param_choices  \n",
    "\n",
    "    def create_random(self):\n",
    "        \"\"\"Create a random network.\"\"\"\n",
    "        for key in self.nn_param_choices:\n",
    "            self.pool[key] = random.choice(self.nn_param_choices[key])\n",
    "\n",
    "    def create_set(self, network):\n",
    "        \"\"\"Set network properties.\n",
    "        \"\"\"\n",
    "        self.pool = network\n",
    "\n",
    "    def train(self, dataset):\n",
    "        \"\"\"Train the network and record the fbeta scores.\n",
    "        \"\"\"\n",
    "        #print(\"Enter Train.\")\n",
    "        \n",
    "        self.fbeta = train_and_score(self, dataset)## esta network e a lista\n",
    "\n",
    "    def print_network(self):\n",
    "        \"\"\"Print out a network.\"\"\"\n",
    "        logging.info(self.pool)\n",
    "        logging.info(\"Network fbeta score: %.2f%%\" % (self.fbeta * 100))\n",
    "        print(\"Network fbeta scores: %.2f%%\" % (self.fbeta * 100))\n",
    "        \n",
    "      \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_scores(networkparam, dataset,nr_steps=500):\n",
    "        \"\"\"Train the model, return test loss.\"\"\"\n",
    "\n",
    "        scores = k_scores(networkparam,nr_steps=500)\n",
    "        \n",
    "        return scores  \n",
    "    \n",
    "def k_scores(networkparam,nr_steps=500,splits=10):\n",
    "    fold = 0\n",
    "    all_test_samples=[]\n",
    "    predicted_labels=[]\n",
    "    fbeta_ =[]\n",
    "    accuracy_ = []\n",
    "    precision_ = []\n",
    "    recall_ = []\n",
    "    fscore_ = []\n",
    "    support_ = []\n",
    "    \n",
    "    # Set defaults.\n",
    "    nb_classes = 10\n",
    "    bs = 32\n",
    "    input_shape = (3072,)\n",
    "    #print(\"TESTE0.\")\n",
    "    \n",
    "    \n",
    "    \n",
    "   # print(\"TESTE,2.\")\n",
    "    kf = KFold(n_splits=splits)\n",
    "    kf.get_n_splits(X)\n",
    "    \n",
    "    for train_index, test_index in kf.split(X):\n",
    "        fold+=1\n",
    "    \n",
    "        \n",
    "        classifier = update_classifier_parameters(networkparam)\n",
    "\n",
    "        print(\"Fold#{}\".format(fold))\n",
    "    \n",
    "        X_train = X.values[train_index]\n",
    "        y_train = Y[train_index]\n",
    "        X_test = X.values[test_index]\n",
    "        y_test = Y[test_index]\n",
    "\n",
    "        X_train_df = pd.DataFrame(X_train,columns=names,index=train_index)\n",
    "        X_test_df = pd.DataFrame(X_test,columns=names,index=test_index)\n",
    "    \n",
    "    \n",
    "        ##print(\"____________________________________________TESTE1.\")\n",
    "        #defining input function to feed the classifier with training data\n",
    "        input_func = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_train_df,\n",
    "                                                         y=y_train,\n",
    "                                                         batch_size=bs,\n",
    "                                                         shuffle=True)\n",
    "        \n",
    "        #print(\" ____________________________________________.TESTE2.\")\n",
    "        #print(input_func)\n",
    "        #train the model\n",
    "        classifier.train(input_fn=input_func,steps=nr_steps)\n",
    "    \n",
    "        #print(\"____________________________________________TESTE3.\")\n",
    "        #defining input function to feed the classifer with testing data\n",
    "        pred_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_test_df,\n",
    "                                                      batch_size=bs,\n",
    "                                                      shuffle=False)\n",
    "        \n",
    "        #print(\"____________________________________________TESTE3.AAA\")\n",
    "        #make predictions based on testing data\n",
    "        note_predictions = list(classifier.predict(input_fn=pred_fn))\n",
    "        #print(\"____________________________________________TESTE4.\")\n",
    "        #extract the labels\n",
    "        final_preds=[]\n",
    "        for pred in note_predictions:\n",
    "            final_preds.append(pred['class_ids'][0])\n",
    "        print(f\"preds {final_preds}\")\n",
    "            #print(\"____________________________________________TESTE5.i\")\n",
    "        #print(\"____________________________________________TESTE5.f\")    \n",
    "        #Adding all accuracy values to an array\n",
    "        fbeta =  fbeta_score(y_test,final_preds,4)\n",
    "        accuracy = accuracy_score(y_test,final_preds)\n",
    "        precision,recall,fscore,support = precision_recall_fscore_support(y_test,final_preds,average='binary')\n",
    "        \n",
    "        \n",
    "        #print(\"____________________________________________TESTE ac\")\n",
    "        fbeta_.append(fbeta)\n",
    "        accuracy_.append(accuracy)\n",
    "        precision_.append(precision)\n",
    "        recall_.append(recall)\n",
    "        fscore_.append(fscore)\n",
    "        support_.append(support)\n",
    "        \n",
    "        print(\"Fold-{}\".format(fold),\"fbeta_score#{}\".format(fbeta))\n",
    "   \n",
    "\n",
    "    return (sum(fbeta_)/len(fbeta_),sum(accuracy_)/len(accuracy_),sum(precision_)/len(precision_),sum(recall_)/len(recall_),\n",
    "            sum(fscore_)/len(fscore_))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_and_score(networkparam, dataset,nr_steps=30):\n",
    "        \"\"\"Train the model, return test loss.\"\"\"\n",
    "\n",
    "        score = simicWay(networkparam,nr_steps=30)\n",
    "        print(\"SCORE: \" + str(score))\n",
    "        return score  \n",
    "    \n",
    "def simicWay(networkparam,nr_steps=30,splits=2):\n",
    "    fold = 0\n",
    "    all_test_samples=[]\n",
    "    predicted_labels=[]\n",
    "    scores=[]\n",
    "    # Set defaults.\n",
    "    nb_classes = 10\n",
    "    bs = 64\n",
    "    input_shape = (3072,)\n",
    "    #print(\"TESTE0.\")\n",
    "    \n",
    "    \n",
    "    \n",
    "   # print(\"TESTE,2.\")\n",
    "    kf = KFold(n_splits=splits)\n",
    "    kf.get_n_splits(X)\n",
    "    \n",
    "    for train_index, test_index in kf.split(X):\n",
    "        fold+=1\n",
    "    \n",
    "        \n",
    "        classifier = update_classifier_parameters(networkparam)\n",
    "\n",
    "        print(\"Fold#{}\".format(fold))\n",
    "    \n",
    "        X_train = X.values[train_index]\n",
    "        y_train = Y[train_index]\n",
    "        X_test = X.values[test_index]\n",
    "        y_test = Y[test_index]\n",
    "\n",
    "        X_train_df = pd.DataFrame(X_train,columns=names,index=train_index)\n",
    "        X_test_df = pd.DataFrame(X_test,columns=names,index=test_index)\n",
    "    \n",
    "    \n",
    "        print(\"____________________________________________TESTE1.\")\n",
    "        #defining input function to feed the classifier with training data\n",
    "        input_func = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_train_df,\n",
    "                                                         y=y_train,\n",
    "                                                         batch_size=bs,\n",
    "                                                         shuffle=True)\n",
    "        \n",
    "        #print(\" ____________________________________________.TESTE2.\")\n",
    "        #print(input_func)\n",
    "        #train the model\n",
    "        classifier.train(input_fn=input_func,steps=nr_steps)\n",
    "    \n",
    "        #print(\"____________________________________________TESTE3.\")\n",
    "        #defining input function to feed the classifer with testing data\n",
    "        pred_fn = tf.compat.v1.estimator.inputs.pandas_input_fn(x=X_test_df,\n",
    "                                                      batch_size=bs,\n",
    "                                                      shuffle=False)\n",
    "        \n",
    "        #print(\"____________________________________________TESTE3.AAA\")\n",
    "        #make predictions based on testing data\n",
    "        note_predictions = list(classifier.predict(input_fn=pred_fn))\n",
    "        #print(\"____________________________________________TESTE4.\")\n",
    "        #extract the labels\n",
    "        final_preds=[]\n",
    "        for pred in note_predictions:\n",
    "            final_preds.append(pred['class_ids'][0])\n",
    "            #print(\"____________________________________________TESTE5.i\")\n",
    "        #print(\"____________________________________________TESTE5.f\")    \n",
    "        #Adding all accuracy values to an array\n",
    "        f_beta =  fbeta_score(y_test,final_preds,4)\n",
    "        #print(\"____________________________________________TESTE ac\")\n",
    "        scores.append(f_beta)\n",
    "        print(\"Fold-{}\".format(fold),\"fbeta_score#{}\".format(f_beta))\n",
    "   \n",
    "\n",
    "    return sum(scores)/len(scores)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MAIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Entry point to evolving the neural network. Start here.\"\"\"\n",
    "import logging\n",
    "##from tqdm import tqdm\n",
    "\n",
    "# Setup logging.\n",
    "logging.basicConfig(\n",
    "    format='%(asctime)s - %(levelname)s - %(message)s',\n",
    "    datefmt='%m/%d/%Y %I:%M:%S %p',\n",
    "    level=logging.DEBUG,\n",
    "    filename='log.txt'\n",
    ")\n",
    "\n",
    "def train_networks(networks, dataset):\n",
    "    \"\"\"Train each network.\n",
    "    \"\"\"\n",
    "    print(\"TRAIN NETWORK.\")\n",
    "    for network in networks:\n",
    "        print(\"------------------------------------------------------------\\\n",
    "              ------------------------------------------------------------\")\n",
    "        print(network.pool)\n",
    "        network.train(dataset)\n",
    "        \n",
    "    \n",
    "\n",
    "def get_average_fbeta_scores(networks):\n",
    "    \"\"\"Get the average accuracy for a group of networks.\n",
    "    \"\"\"\n",
    "    total_scores = 0\n",
    "    for network in networks:\n",
    "        total_scores += network.fbeta\n",
    "\n",
    "    return total_scores / len(networks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate(generations, population, nn_param_choices, dataset):\n",
    "    \"\"\"Generate a network with the genetic algorithm.\n",
    "    \"\"\"\n",
    "    \n",
    "    optimizer = Optimizer(nn_param_choices)\n",
    "    \n",
    " \n",
    "    networks = optimizer.create_population(population)\n",
    "    \n",
    "    average_fbeta_scores = list()\n",
    "\n",
    "    # Evolve the generation.\n",
    "    for i in range(generations):\n",
    "        logging.info(\"***Doing generation %d of %d***\" %\n",
    "                     (i + 1, generations))\n",
    "        #print(\"START TRAINING.\")\n",
    "        # Train and get accuracy for networks.\n",
    "        train_networks(networks, dataset)\n",
    "        #print(\" TRAINING.\")\n",
    "        # Average fbeta scores for this generation.\n",
    "        average_scores = get_average_fbeta_scores(networks)\n",
    "\n",
    "        # Print out average fbeta scores in each generation.\n",
    "        logging.info(\"Generation average: %.2f%%\" % (average_scores * 100))\n",
    "        logging.info('-'*80)\n",
    "        average_fbeta_scores.append(average_scores)\n",
    "        # Evolve, except on the last iteration.\n",
    "        if i != generations - 1:\n",
    "            # Do the evolution.\n",
    "            networks = optimizer.evolve(networks)\n",
    "        \n",
    "        print(f\"generation {i}\")\n",
    "        \n",
    "    # Sort our final population.\n",
    "    networks = sorted(networks, key=lambda x: x.fbeta, reverse=True)\n",
    "\n",
    "    # Print out the top 5 networks.\n",
    "    print_networks(networks[:5])\n",
    "    \n",
    "    return (networks,average_fbeta_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nn_param_choices():\n",
    "    population=[]\n",
    "    \n",
    "    for i in range(10):\n",
    "        cromo=[]\n",
    "        cromo.append(np.random.uniform(low=10**-2, high=10**-1))\n",
    "        cromo.append(np.random.choice([8, 16, 32, 64]))\n",
    "        cromo.append(np.random.randint(low=1, high=3))\n",
    "        cromo.append(np.random.randint(low=0, high=2))\n",
    "        population.append(cromo)\n",
    "        \n",
    "    return population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_networks(networks):\n",
    "    \"\"\"Print a list of networks.\n",
    "    \"\"\"\n",
    "    logging.info('-'*80)\n",
    "    for network in networks:\n",
    "        network.print_network()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evolve a network.\n",
      "[0.025454016042250914, 8, 1, 0]\n",
      "Start Create Pop.\n",
      "TRAIN NETWORK.\n",
      "------------------------------------------------------------              ------------------------------------------------------------\n",
      "[0.025454016042250914, 8, 1, 0]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4hleltee\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmp4hleltee', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA8BF2088>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "____________________________________________TESTE1.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\training\\training_util.py:236: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\inputs\\queues\\feeding_queue_runner.py:62: QueueRunner.__init__ (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "To construct input pipelines, use the `tf.data` module.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\inputs\\queues\\feeding_functions.py:500: add_queue_runner (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "To construct input pipelines, use the `tf.data` module.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\ops\\init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8C97BC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8C97BC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8C97BC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8C97BC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8CBF248>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8CBF248>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8CBF248>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8CBF248>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CA7A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CA7A08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CA7A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CA7A08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8CE3788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8CE3788>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8CE3788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8CE3788>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CE3EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CE3EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CE3EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8CE3EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\canned\\head.py:437: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.cast` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\ops\\nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\training\\monitored_session.py:875: start_queue_runners (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "To construct input pipelines, use the `tf.data` module.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4hleltee\\model.ckpt.\n",
      "INFO:tensorflow:loss = 45.987232, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4hleltee\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 19.63627.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAEB188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAEB188>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAEB188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAEB188>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A493B08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A493B08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A493B08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A493B08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A498A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A498A08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A498A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A498A08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A49FFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A49FFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A49FFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A49FFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "WARNING:tensorflow:From C:\\Users\\hugoa\\anaconda3\\envs\\tf_gpu1.1.17\\lib\\site-packages\\tensorflow\\python\\training\\saver.py:1276: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use standard file APIs to check for files with this prefix.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4hleltee\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-1 fbeta_score#0.8650442477876108\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpolctvx0v\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpolctvx0v', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA9B49EC8>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8BF0608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8BF0608>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8BF0608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8BF0608>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA93FFCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA93FFCC8>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA93FFCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA93FFCC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9408C48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9408C48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9408C48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9408C48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9408EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9408EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9408EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9408EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940B608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940B608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940B608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940B608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpolctvx0v\\model.ckpt.\n",
      "INFO:tensorflow:loss = 44.939285, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpolctvx0v\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 19.554499.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F3BF308>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F3BF308>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F3BF308>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F3BF308>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8D22C88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8D22C88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8D22C88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8D22C88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9722208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9722208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9722208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9722208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A59C1C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A59C1C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A59C1C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A59C1C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpolctvx0v\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-2 fbeta_score#0.771542471634468\n",
      "SCORE: 0.8182933597110393\n",
      "------------------------------------------------------------              ------------------------------------------------------------\n",
      "[0.07374164155436544, 64, 1, 1]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpqlulrrnq\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpqlulrrnq', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA8FCA548>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA948EAC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA948EAC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA948EAC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA948EAC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A79EE88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A79EE88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A79EE88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A79EE88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8FD4188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8FD4188>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8FD4188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8FD4188>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8FD4808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8FD4808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8FD4808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8FD4808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9625988>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9625988>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9625988>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9625988>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpqlulrrnq\\model.ckpt.\n",
      "INFO:tensorflow:loss = 46.488865, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpqlulrrnq\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 16.999561.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA915DD48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA915DD48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA915DD48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA915DD48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA95BAD48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA95BAD48>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA95BAD48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA95BAD48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A6719C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A6719C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A6719C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A6719C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940CCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940CCC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940CCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA940CCC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpqlulrrnq\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-1 fbeta_score#0.8189919242550822\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpv2thr13d\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpv2thr13d', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA9460548>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5EB88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5EB88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5EB88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5EB88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9188408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9188408>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9188408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9188408>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473108>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473108>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9473708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9473708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9473708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9473708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473F48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473F48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473F48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9473F48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpv2thr13d\\model.ckpt.\n",
      "INFO:tensorflow:loss = 46.33445, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpv2thr13d\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 10.967757.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA972E488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA972E488>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA972E488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA972E488>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8F68288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8F68288>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8F68288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8F68288>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8D34808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8D34808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8D34808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8D34808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9308D48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9308D48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9308D48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9308D48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpv2thr13d\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-2 fbeta_score#0.8139676730710583\n",
      "SCORE: 0.8164797986630703\n",
      "------------------------------------------------------------              ------------------------------------------------------------\n",
      "[0.09988694450289443, 8, 1, 0]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwbmlp0_i\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpwbmlp0_i', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA949DF88>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9395808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9395808>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9395808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9395808>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A7B3608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A7B3608>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A7B3608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A7B3608>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0AAEB5C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0AAEB5C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0AAEB5C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0AAEB5C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0AAEBEC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0AAEBEC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0AAEBEC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0AAEBEC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA948FDC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA948FDC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA948FDC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA948FDC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwbmlp0_i\\model.ckpt.\n",
      "INFO:tensorflow:loss = 42.470978, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwbmlp0_i\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 22.54194.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13BD6108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13BD6108>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13BD6108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13BD6108>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B13BDF8C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B13BDF8C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B13BDF8C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B13BDF8C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13BE6E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13BE6E88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13BE6E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13BE6E88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA94EADC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA94EADC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA94EADC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA94EADC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwbmlp0_i\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-1 fbeta_score#0.8009478672985783\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpci74h7tw\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpci74h7tw', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA9756A08>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8CE3808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8CE3808>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8CE3808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8CE3808>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E89C08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E89C08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E89C08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E89C08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937A148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937A148>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937A148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937A148>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA937AE88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA937AE88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA937AE88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA937AE88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937ACC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937ACC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937ACC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA937ACC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpci74h7tw\\model.ckpt.\n",
      "INFO:tensorflow:loss = 42.57789, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpci74h7tw\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 16.885141.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8D34A48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8D34A48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8D34A48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8D34A48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A583448>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A583448>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A583448>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0A583448>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8308>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8308>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8308>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8308>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8FC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8FC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8FC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13CB8FC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpci74h7tw\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-2 fbeta_score#0.8584820078621106\n",
      "SCORE: 0.8297149375803444\n",
      "------------------------------------------------------------              ------------------------------------------------------------\n",
      "[0.017385197384877343, 32, 2, 0]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmph1n0vm_c\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmph1n0vm_c', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA8DB4CC8>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AA8AD88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AA8AD88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AA8AD88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AA8AD88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA97DA748>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA97DA748>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA97DA748>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA97DA748>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416F88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416F88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9416DC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9416DC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9416DC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA9416DC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416508>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA9416508>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8EACCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8EACCC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8EACCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8EACCC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8EACF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8EACF48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8EACF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8EACF48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmph1n0vm_c\\model.ckpt.\n",
      "INFO:tensorflow:loss = 44.19989, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmph1n0vm_c\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 21.018345.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13DC4788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13DC4788>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13DC4788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B13DC4788>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9625788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9625788>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9625788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA9625788>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DA408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DA408>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DA408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DA408>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DAFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DAFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DAFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F3DAFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13D52988>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13D52988>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13D52988>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13D52988>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmph1n0vm_c\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-1 fbeta_score#0.0\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpo0qep68f\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpo0qep68f', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA8FCA388>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F4AAFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F4AAFC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F4AAFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0F4AAFC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA94CE188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA94CE188>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA94CE188>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA94CE188>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340408>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340408>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0F340208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0F340208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0F340208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B0F340208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340CC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340CC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340CC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F340CC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8BE1588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8BE1588>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8BE1588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028AA8BE1588>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F4A5608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F4A5608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F4A5608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F4A5608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpo0qep68f\\model.ckpt.\n",
      "INFO:tensorflow:loss = 44.459824, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpo0qep68f\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 21.513857.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5BD88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5BD88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5BD88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA8F5BD88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E22EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E22EC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E22EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8E22EC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163108>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163108>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163108>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163388>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163388>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163388>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B163388>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B154BC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B154BC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B154BC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B154BC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpo0qep68f\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-2 fbeta_score#0.0\n",
      "SCORE: 0.0\n",
      "------------------------------------------------------------              ------------------------------------------------------------\n",
      "[0.039600044870880036, 8, 1, 1]\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpafyt2f1q\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpafyt2f1q', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028B14659788>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAA6B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAA6B48>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAA6B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0AAA6B48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA92C96C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA92C96C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA92C96C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA92C96C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13C23AC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13C23AC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13C23AC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B13C23AC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B13C235C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B13C235C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B13C235C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B13C235C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA960AD08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA960AD08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA960AD08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA960AD08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpafyt2f1q\\model.ckpt.\n",
      "INFO:tensorflow:loss = 44.787296, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpafyt2f1q\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 13.938725.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9389B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9389B48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9389B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028AA9389B48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0AB40AC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0AB40AC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0AB40AC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0AB40AC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51E0C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51E0C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51E0C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51E0C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51EB48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51EB48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51EB48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0F51EB48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpafyt2f1q\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-1 fbeta_score#0.8237259816207184\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp91ulfe7n\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmp91ulfe7n', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000028AA8EACC08>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "____________________________________________TESTE1.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0A652E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0A652E88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0A652E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B0A652E88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0F4053C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0F4053C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0F4053C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028B0F4053C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA97A7E48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA97A7E48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA97A7E48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA97A7E48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B14042348>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B14042348>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B14042348>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000028B14042348>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A5E9608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A5E9608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A5E9608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0A5E9608>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp91ulfe7n\\model.ckpt.\n",
      "INFO:tensorflow:loss = 59.569603, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 7 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp91ulfe7n\\model.ckpt.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Loss for final step: 15.131897.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B14054408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B14054408>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B14054408>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000028B14054408>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8BFB9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8BFB9C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8BFB9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000028AA8BFB9C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B31FC48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B31FC48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B31FC48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028B0B31FC48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8E896C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8E896C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8E896C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000028AA8E896C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp91ulfe7n\\model.ckpt-7\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "Fold-2 fbeta_score#0.8391883706844337\n",
      "SCORE: 0.8314571761525761\n",
      "generation 0\n",
      "Network fbeta scores: 83.15%\n",
      "Network fbeta scores: 82.97%\n",
      "Network fbeta scores: 81.83%\n",
      "Network fbeta scores: 81.65%\n",
      "Network fbeta scores: 0.00%\n",
      "[<__main__.Network object at 0x0000028AA8BFDD48>, <__main__.Network object at 0x0000028AA8BFDD08>, <__main__.Network object at 0x0000028AA8BD81C8>, <__main__.Network object at 0x0000028AA8BFDE08>, <__main__.Network object at 0x0000028AA8BFDC88>]\n",
      "[0.659189054421406]\n",
      "[0.039600044870880036, 8, 1, 1]\n",
      "[0.09988694450289443, 8, 1, 0]\n",
      "[0.025454016042250914, 8, 1, 0]\n",
      "[0.07374164155436544, 64, 1, 1]\n",
      "[0.017385197384877343, 32, 2, 0]\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    \"\"\"Evolve a network.\"\"\"\n",
    "    print(\"Evolve a network.\")\n",
    "    generations = 1  # Number of times to evole the population.\n",
    "    population = 5  # Number of networks in each generation.\n",
    "    dataset = data\n",
    "    \n",
    "    #parameters=[learning_rate,num_nodes,num_hidden_l,activation_fun]\n",
    "    \n",
    "    param_choices = nn_param_choices()\n",
    "    print(param_choices[0])\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "    \n",
    "        \n",
    "        \n",
    "        #'nb_neurons': [64, 128, 256, 512, 768, 1024],\n",
    "        #'nb_layers': [1, 2, 3, 4],\n",
    "        #'activation': ['relu', 'elu', 'tanh', 'sigmoid'],\n",
    "        #'optimizer': ['rmsprop', 'adam', 'sgd', 'adagrad',\n",
    "                      #'adadelta', 'adamax', 'nadam'],\n",
    "\n",
    "    \n",
    "    \n",
    "    logging.info(\"***Evolving %d generations with population %d***\" %\n",
    "                 (generations, population))\n",
    "\n",
    "    networks,avs = generate(generations, population, param_choices, dataset)\n",
    "    \n",
    "    print(networks)\n",
    "    print(avs)\n",
    "    \n",
    "    for i in networks:\n",
    "        print(i.pool)\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n"
     ]
    }
   ],
   "source": [
    "best_network =  Network(net[0])\n",
    "print(best_network.pool)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{0: 0.03547198956049661, 1: 32, 2: 1, 3: 1},\n",
       " {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1},\n",
       " {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1},\n",
       " {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1},\n",
       " {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "net = [None] * 5\n",
    "\n",
    "net[0] = {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n",
    "##Network fbeta score: 85.39%\n",
    "net[1] = {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n",
    "##Network fbeta score: 84.06%\n",
    "net[2] = {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n",
    "##Network fbeta score: 83.65%\n",
    "net[3] =  {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n",
    "##Network fbeta score: 83.43%\n",
    "net[4] = {0: 0.03547198956049661, 1: 32, 2: 1, 3: 1}\n",
    "##Network fbeta score: 83.41%\n",
    "\n",
    "net"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmposi9oyl_\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmposi9oyl_', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001379441CD48>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#1\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794D2FB08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794D2FB08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794D2FB08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794D2FB08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794647608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794647608>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794647608>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794647608>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794C97E48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794C97E48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794C97E48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794C97E48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794C97908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794C97908>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794C97908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794C97908>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD52B08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD52B08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD52B08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD52B08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmposi9oyl_\\model.ckpt.\n",
      "INFO:tensorflow:loss = 28.87505, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmposi9oyl_\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 10.00863.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x00000137946A4648>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x00000137946A4648>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x00000137946A4648>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x00000137946A4648>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BBF6A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BBF6A08>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BBF6A08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BBF6A08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943390C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943390C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943390C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943390C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795091D48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795091D48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795091D48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795091D48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmposi9oyl_\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]\n",
      "Fold-1 fbeta_score#0.8678010471204188\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmptnb176el\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmptnb176el', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001378B053888>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#2\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794248F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794248F88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794248F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794248F88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137942C1948>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137942C1948>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137942C1948>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137942C1948>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DDBA808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DDBA808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DDBA808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DDBA808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DDBA2C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DDBA2C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DDBA2C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DDBA2C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D81FC08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D81FC08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D81FC08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D81FC08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmptnb176el\\model.ckpt.\n",
      "INFO:tensorflow:loss = 22.84264, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmptnb176el\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 4.4262886.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379426B908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379426B908>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379426B908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379426B908>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137940BA4C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137940BA4C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137940BA4C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x00000137940BA4C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E104808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E104808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E104808>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E104808>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1049C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1049C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1049C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1049C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmptnb176el\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0]\n",
      "Fold-2 fbeta_score#0.8710743801652892\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpvtbkgo94\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpvtbkgo94', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001378AD75248>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#3\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375D6F4688>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375D6F4688>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375D6F4688>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375D6F4688>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D9760C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D9760C8>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D9760C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D9760C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB90EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB90EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB90EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB90EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375E710C08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375E710C08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375E710C08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375E710C08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E710D88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E710D88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E710D88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E710D88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpvtbkgo94\\model.ckpt.\n",
      "INFO:tensorflow:loss = 22.960236, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpvtbkgo94\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 3.7964478.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379518E888>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379518E888>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379518E888>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379518E888>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DB1A208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DB1A208>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DB1A208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DB1A208>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB1AB08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB1AB08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB1AB08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DB1AB08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DED5208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DED5208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DED5208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DED5208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpvtbkgo94\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1]\n",
      "Fold-3 fbeta_score#0.9431345353675449\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp__cp25kw\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmp__cp25kw', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x0000013794C97308>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#4\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E244508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E244508>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E244508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E244508>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794A3A1C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794A3A1C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794A3A1C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794A3A1C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794183EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794183EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794183EC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794183EC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DA21CC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DA21CC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DA21CC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375DA21CC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794321708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794321708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794321708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794321708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp__cp25kw\\model.ckpt.\n",
      "INFO:tensorflow:loss = 22.54956, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp__cp25kw\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 5.41602.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794CCFE48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794CCFE48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794CCFE48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794CCFE48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D6DB288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D6DB288>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D6DB288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D6DB288>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E0A8B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E0A8B48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E0A8B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E0A8B48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B05D588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B05D588>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B05D588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B05D588>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp__cp25kw\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1]\n",
      "Fold-4 fbeta_score#0.9069478908188586\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp2c0ml4kw\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmp2c0ml4kw', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001378B5A4EC8>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#5\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DEBE148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DEBE148>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DEBE148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DEBE148>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AF518C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AF518C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AF518C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AF518C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82D908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82D908>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82D908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82D908>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375D82D9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375D82D9C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375D82D9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001375D82D9C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82DF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82DF48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82DF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D82DF48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp2c0ml4kw\\model.ckpt.\n",
      "INFO:tensorflow:loss = 23.255215, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp2c0ml4kw\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 2.7031605.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379470CD08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379470CD08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379470CD08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379470CD08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794265908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794265908>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794265908>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794265908>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943A0248>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943A0248>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943A0248>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137943A0248>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137946BDB88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137946BDB88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137946BDB88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137946BDB88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp2c0ml4kw\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1]\n",
      "Fold-5 fbeta_score#0.7727272727272728\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpjtss16ts\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpjtss16ts', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001375DD8F988>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#6\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DBF3F48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DBF3F48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DBF3F48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DBF3F48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C6FC08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C6FC08>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C6FC08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C6FC08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794FB23C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794FB23C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794FB23C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794FB23C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794FB2788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794FB2788>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794FB2788>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794FB2788>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009148>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009148>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpjtss16ts\\model.ckpt.\n",
      "INFO:tensorflow:loss = 22.189377, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpjtss16ts\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 3.8644705.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794757148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794757148>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794757148>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794757148>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378B053448>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378B053448>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378B053448>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378B053448>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D5C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D5C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D5C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D5C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D6C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D6C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D6C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E22D6C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpjtss16ts\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1]\n",
      "Fold-6 fbeta_score#0.8472668810289391\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpx523st0v\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpx523st0v', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001379444BA08>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#7\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378BB9BF08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378BB9BF08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378BB9BF08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378BB9BF08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013795250F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013795250F88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013795250F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013795250F88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001379506F708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001379506F708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001379506F708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001379506F708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001379506F088>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001379506F088>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001379506F088>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001379506F088>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B6AD208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B6AD208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B6AD208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B6AD208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpx523st0v\\model.ckpt.\n",
      "INFO:tensorflow:loss = 27.20108, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpx523st0v\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 6.234537.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794BF2508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794BF2508>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794BF2508>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794BF2508>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BB90DC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BB90DC8>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BB90DC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378BB90DC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794951208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794951208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794951208>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794951208>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DF52488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DF52488>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DF52488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DF52488>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpx523st0v\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1]\n",
      "Fold-7 fbeta_score#0.8005540166204985\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpzygwedzf\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpzygwedzf', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001378BBF4988>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#8\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E0FF488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E0FF488>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E0FF488>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375E0FF488>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DCF41C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DCF41C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DCF41C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375DCF41C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009F88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009F88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013795009F88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001378B4F0F08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001378B4F0F08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001378B4F0F08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x000001378B4F0F08>>: AssertionError: Bad argument number for Name: 3, expecting 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B4F0708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B4F0708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B4F0708>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378B4F0708>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpzygwedzf\\model.ckpt.\n",
      "INFO:tensorflow:loss = 27.00502, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpzygwedzf\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 5.6075716.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379499D9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379499D9C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379499D9C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001379499D9C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C61348>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C61348>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C61348>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794C61348>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BF0C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BF0C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BF0C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BF0C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BFFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BFFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BFFC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D8BFFC8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpzygwedzf\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1]\n",
      "Fold-8 fbeta_score#0.8694885361552028\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwg1hzlvm\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmpwg1hzlvm', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001379511DE88>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#9\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013795224C48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013795224C48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013795224C48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013795224C48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D8BFCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D8BFCC8>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D8BFCC8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001375D8BFCC8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794991B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794991B48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794991B48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794991B48>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794117548>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794117548>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794117548>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x0000013794117548>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378BBF4A88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378BBF4A88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378BBF4A88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001378BBF4A88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwg1hzlvm\\model.ckpt.\n",
      "INFO:tensorflow:loss = 20.93785, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwg1hzlvm\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 3.8595915.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DADAA88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DADAA88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DADAA88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001375DADAA88>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794321648>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794321648>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794321648>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794321648>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137942F40C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137942F40C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137942F40C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x00000137942F40C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1D24C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1D24C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1D24C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375E1D24C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmpwg1hzlvm\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0]\n",
      "Fold-9 fbeta_score#0.8742857142857142\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4elabruq\n",
      "INFO:tensorflow:Using config: {'_model_dir': 'C:\\\\Users\\\\hugoa\\\\AppData\\\\Local\\\\Temp\\\\tmp4elabruq', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001379642E348>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "Fold#10\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378B5D53C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378B5D53C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378B5D53C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x000001378B5D53C8>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AEC0588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AEC0588>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AEC0588>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x000001378AEC0588>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D6F4E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D6F4E88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D6F4E88>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375D6F4E88>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x00000137949603C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x00000137949603C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x00000137949603C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dropout.call of <tensorflow.python.layers.core.Dropout object at 0x00000137949603C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794960288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794960288>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794960288>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794960288>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4elabruq\\model.ckpt.\n",
      "INFO:tensorflow:loss = 22.413525, step = 0\n",
      "INFO:tensorflow:Saving checkpoints for 24 into C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4elabruq\\model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 4.713005.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794EC7F08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794EC7F08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING: Entity <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794EC7F08>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method _DNNModel.call of <tensorflow_estimator.python.estimator.canned.dnn._DNNModel object at 0x0000013794EC7F08>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794B7FF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794B7FF48>>: AttributeError: module 'gast' has no attribute 'Num'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Entity <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794B7FF48>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method DenseFeatures.call of <tensorflow.python.feature_column.feature_column_v2.DenseFeatures object at 0x0000013794B7FF48>>: AttributeError: module 'gast' has no attribute 'Num'\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794F377C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794F377C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794F377C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x0000013794F377C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING:tensorflow:Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD598C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD598C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "WARNING: Entity <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD598C8>> could not be transformed and will be executed as-is. Please report this to the AutgoGraph team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output. Cause: converting <bound method Dense.call of <tensorflow.python.layers.core.Dense object at 0x000001375DD598C8>>: AssertionError: Bad argument number for Name: 3, expecting 4\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from C:\\Users\\hugoa\\AppData\\Local\\Temp\\tmp4elabruq\\model.ckpt-24\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "preds [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]\n",
      "Fold-10 fbeta_score#0.8401162790697675\n"
     ]
    }
   ],
   "source": [
    "scores = get_scores(Network(net[0]), data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8593396553359506,\n",
       " 0.7879518072289156,\n",
       " 0.7443950707012165,\n",
       " 0.868426593185587,\n",
       " 0.7990990490021004)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "fbeta\n",
    "accuracy\n",
    "precision\n",
    "recall\n",
    "fscore\n",
    "support\n",
    "'''\n",
    "scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.6545051758648762,\n",
       " 0.7558555779603559,\n",
       " 0.8341047549920907,\n",
       " 0.8296549882346019,\n",
       " 0.8311536467878259,\n",
       " 0.843997295705311,\n",
       " 0.8377344776137161,\n",
       " 0.8313235846569358,\n",
       " 0.8518408589857984,\n",
       " 0.8401147196405028,\n",
       " 0.83314198824267,\n",
       " 0.8312276938291709,\n",
       " 0.7670716307304162,\n",
       " 0.8255371998752892,\n",
       " 0.8376056789441877,\n",
       " 0.8509921470148853,\n",
       " 0.845227635490799,\n",
       " 0.8466743482743004,\n",
       " 0.8250482822110055,\n",
       " 0.8398712871842255]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avs = [0.6545051758648762, 0.7558555779603559, 0.8341047549920907, 0.8296549882346019, 0.8311536467878259, 0.843997295705311, 0.8377344776137161, 0.8313235846569358, 0.8518408589857984, 0.8401147196405028, 0.83314198824267, 0.8312276938291709, 0.7670716307304162, 0.8255371998752892, 0.8376056789441877, 0.8509921470148853, 0.845227635490799, 0.8466743482743004, 0.8250482822110055, 0.8398712871842255]\n",
    "avs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def convergence(log):\n",
    "    plt.plot(log)\n",
    "    plt.xlabel(\"generations\")\n",
    "    plt.ylabel(\"average fitness\")\n",
    "    plt.show()\n",
    "    \n",
    "convergence(avs)\n",
    "    "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
